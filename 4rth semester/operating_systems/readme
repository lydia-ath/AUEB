Εργασία Λειτουργικά Συστήματα 

Δομή Κώδικα :
Κάνουμε include το αρχείο δηλώσεων header.h στο οποίο έχουμε αρχικοποιήσει τις μεταβλητές Nseat, Ntel, Nseatlow, Nseathigh, Tseatlow, 
Tseathigh, PzoneA, PzoneB, PzoneC, CzoneA, CzoneB, CzoneC, Ncash, NzoneA, NzoneB, NzoneC, Pcardsuccess, Tcashlow, Tcashhligh τις οποίες χρησιμοποιούμε παρακάτω.

Main: 
Στο κύριο μέρος του προγράμματος αρχικοποιούμε τα Mutexes και τις μεταβλητές availZoneA, availZoneB, availZoneC, availphones και availCashiers οι οποίες 
αναφέρονται στον αριθμό των θέσεων των ζωνών,στον αριθμό των τηλεφωνητών και στον αριθμό των ταμειών αντίστοιχα. Έπειτα δεσμεύουμε μνήμη για τα πλάνα θέσεων(zoneA, 
zoneB, zoneC) που θα χρησιμοποιηθoύν, χρησιμοποιώντας memory allocation (malloc) και σε περίπτωση που αποτύχει η δέσμευση μνήμης την αποδεσμεύουμε. 

Παίρνουμε σαν είσοδο τον αριθμό των πελατών (Ncust) και το σπόρο για τη συνάρτηση ψευδοτυχαίων αριθμών. Αρχικοποιούμε τις αρχικές θέσεις με μηδέν υποδηλώνοντας ότι δεν έχουν 
δεσμευτεί από κάποιον πελάτη προς στιγμήν. Στη συνέχεια, δημιουργούμε και αριθμούμε τα νήματα απο 1 μέχρι Ncust και σε περίπτωση που αποτύχει η δημιουργία νήματος 
απελευθερώνουμε την αντίστοιχη μνήμη και βγαίνουμε από το πρόγραμμα. Κάθε φορά που θέλουμε να εμφανίσουμε μήνυμα στον χρήστη κλειδώνουμε το αντίστοιχο mutex της 
οθόνης (print_m). 

Στο τέλος του προγράμματος καλούμε τη μέθοδο destruction η οποία καταστρέφει όλα τα pthread_mutex και απελευθερώνει την μνήμη(free).

client_method: Κατασκευάζουμε πέντε struct τύπου timespec από το πακέτο time.h το χρησιμοποιούμε για να υπολογίσουμε τον χρόνο αναμονής, εξυπηρέτησης. Ο χρόνος 
αναμονής και εξυπηρέτης ξεκινά με την εκκίνηση του thread. Στη συνέχεια ελέγχουμε αν υπάρχουν διαθέσιμοι τηλεφωνητές και αν όχι το νήμα μεταβαίνει σε κατάσταση αναμονής
μέχρι να του δωθεί σήμα εκκίνησης. Μειώνουμε τον αριθμό των διαθέσιμων τηλεφωνητών και έπειτα σημειώνουμε το χρονικό σημείο στο οποίο τελειώνει ο χρόνος 
αναμονής του thread, υπολογίζουμε τη διαρκεία της και μέσω αυτής υπολογίζουμε το μέχρι στιγμής μέσο χρόνο αναμονής. Στη συνέχεια βρίσκουμε τον τυχαίο χρόνο που θα 
πάρει στον τηλεφώνητη να βρει θέσεις στον πελάτη και τον αριθμό των εισιτηρίων. Αν το νήμα αποτύχει να κάνει sleep κατά τυχαίο χρόνο τυπώνουμε σχετικό μήνυμα, 
απελευθερώνουμε τον τηλεφωνητή, στέλνουμε σήμα απελευθέρωσης στα άλλα νήματα και κάνουμε έξοδο από το νήμα. Αν οι διαθέσιμες συνεχόμενες θέσεις σε μια από τις τρεις 
ζώνες είναι λιγότερες από τα εισητήρια που κλείνει ο πελάτης σε μια ζώνη τότε απελευθερώνεται ο τηλεφώνητης, στέλνει σήμα στα υπόλοιπα νήματα και εμφανίζεται 
κατάλληλο μήνυμα. Αν όχι δεσμεύονται οι κενές θέσεις στο πλάνο του θεάτρου, βάζοντας στον αντίστοιχο πίνακα θέσεων το id του πελάτη σε κάθε θέση που κατωχυρώνει και τον 
αριθμό αυτής στον πίνακα seats_ids. Έπειτα μειώνουμε τις διαθέσιμες θέσεις σύμφωνα μετο πλήθος των εισιτηρίων που έκλεισε ο πελάτης. Μετά ακολουθεί η διαδικασία 
πληρωμής από τον ταμεία(Cashier). 
O χρόνος αναμονής και εξυπηρέτης ξεκινά με την εκκίνηση της μεθόδου cardSuccess. Στη συνέχεια ελέγχουμε αν υπάρχουν διαθέσιμοι 
ταμίες και αν όχι το νήμα μεταβαίνει σε κατάσταση αναμονής μέχρι να του δωθεί σήμα εκκίνησης. Μειώνουμε τον αριθμό των διαθέσιμων ταμίων και έπειτα σημειώνουμε το 
χρονικό σημείο στο οποίο τελειώνει ο χρόνος αναμονής του thread, υπολογίζουμε τη διαρκεία της και μέσω αυτής υπολογίζουμε το μέχρι στιγμής μέσο χρόνο αναμονής. Στη 
συνέχεια υπολογίζουμε με τυχαιοποίηση την επιτυχία της κάρτας με πιθανότητα 90% (αποτυχία 10%). Αν η διαδικασία επιτύχει αυξάνεται το ποσό του λογαριασμού της 
εταιρείας και εκτυπώνουμε τα στοιχεία κράτησης του πελάτη και τη πληρωτέα τιμή. Σε περίπτωση αποτυχίας επαναφέρονται οι θεσεις του πελάτη στο πλάνο του θεάτρου με τη 
βοήθεια του πίνακα seats_ids, αυξάνεται ο αριθμός διαθέσιμων θέσεων και τυπώνεται το κατάλληλο μήνυμα. Σε κάθε περίπτωση απελευθερώνουμε τη μνήμη που δεσμεύσαμε για 
τον seats_ids και κράταμε τη χρονική στιγμή που ολοκληρώνεται η εξυπηρέτηση του πελάτη για να υπολογιστεί ο μέχρι στιγμής μέσος χρόνος εξυπηρέτησης. Τέλος 
απελευθερώνεται ο ταμίας, στέλνεται σήμα απελευθέρωσης του στα άλλα νήματα και τερματίζει το νήμα.

Επιπρόσθετα στοιχεία:

initialization: καλείται για να δημιουργήσει τα Mutexes

destroy: καλείται μέσα στην destruction για να αποδευσμεύσει τη μνήμη ενός Mutex

destruction: καλείται στις ολικές εξόδους από το πρόγραμμα, για να καταστρέψει τα Mutexes και να ελευθερώσει τη συνολική μνήμη που έχει δεσμευθεί κατά την διαρκεια 
του προγράμματος. 

s_random: συνάρτηση παίρνει ως seed σπόρο το αποτέσμα της προηγούμενης εκτέλεσής της ώστε να έχουμε μια γεννήτρια ψευδοτυχαίων αριθμών. Ως αποτέλεσμα το 
seed ανανεώνεται για κάθε διαφορετικό νήμα κάθε φορά που καλείται η συνάρτηση.

pthread_mutex_t availZoneA_m: βοηθητικό mutex για την μεταβλητή availZoneA ώστε όταν μεταβάλλεται η μεταβλητή από ένα νήμα να μην μπορεί να μεταβληθεί από 
κάποιο άλλο την ίδια χρονική στιγμή. (Αντίστοιχα για τα mutexes: pthread_mutex_t availZoneB_m, pthread_mutex_t availZoneC_m)

seats_id: πίνακας που δημιουργείται για κάθε νήμα και αποθηκεύσει τις θέσεις που κλείνει κάθε πελάτης.
